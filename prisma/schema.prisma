// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  PENDING
  ACTIVATED
  DEACTIVATED
}

enum UserGroupRole {
  ADMIN
  MAINTAINER
  PARTICIPANT
}

enum UserGroupStatus {
  PENDING
  ACTIVATED
  DEACTIVATED
}

model User {
  id           Int        @id @default(autoincrement())
  uuid         String     @unique @default(uuid()) @db.Uuid
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  email        String     @unique
  nickname     String     @unique
  name         String
  password     String
  confirmEmail Boolean    @default(false) @map("confirm_email")
  status       UserStatus @default(PENDING)
  title        String?
  aboutMe      String?    @map("about_me")
  companyName  String?    @map("company_name")
  companyRole  String?    @map("company_role")
  photoUrl     String?    @map("photo_url")

  groups            UserGroup[]
  events            UserEvent[]
  recoveryPassword  RecoveryPassword[]
  degree            Degree?
  socialNetworks    SocialNetwork[]
  knowledge         Knowledge[]
  eventComment      EventComment[]
  groupComment      GroupComment[]
  eventNotification EventNotification[]

  @@map("user")
}

model Group {
  id           Int            @id @default(autoincrement())
  uuid         String         @unique @default(uuid()) @db.Uuid
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  name         String
  description  String
  slug         String         @unique
  coverUrl     String?        @map("cover_url")
  isPublised   Boolean        @default(false) @map("is_publised")
  users        UserGroup[]
  events       Event[]
  groupComment GroupComment[]

  @@map("group")
}

model UserGroup {
  id          Int             @id @default(autoincrement())
  user        User            @relation(fields: [fk_id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_user  Int
  group       Group           @relation(fields: [fk_id_group], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_group Int
  role        UserGroupRole   @default(PARTICIPANT)
  status      UserGroupStatus @default(ACTIVATED)

  @@map("user_group")
}

model Event {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid()) @db.Uuid
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  name              String
  description       String
  coverUrl          String?             @map("cover_url")
  slug              String              @unique
  initialDate       DateTime            @map("initial_date")
  finishDate        DateTime            @map("finish_date")
  address           String
  limitParticipants Int                 @map("limit_participants")
  isPublised        Boolean             @default(false) @map("is_publised")
  users             UserEvent[]
  group             Group?              @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId           Int?                @map("group_id")
  eventComment      EventComment[]
  eventNotification EventNotification[]

  @@map("event")
}

model UserEvent {
  id          Int   @id @default(autoincrement())
  user        User  @relation(fields: [fk_id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_user  Int
  event       Event @relation(fields: [fk_id_event], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_event Int

  @@map("user_event")
}

model RecoveryPassword {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid()) @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [fk_id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_user Int
  isUsed     Boolean  @default(false) @map("is_used")

  @@map("recovery_password")
}

enum Degree {
  UNDER_GRADUATE
  GRADUATE
  MASTER
  DOCTOR
}

enum SocialNetworkType {
  FACEBOOK
  LINKEDIN
  GITHUB
  TWITTER
}

model SocialNetwork {
  id         Int               @id @default(autoincrement())
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")
  user       User              @relation(fields: [fk_id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_user Int
  type       SocialNetworkType
  link       String

  @@unique([fk_id_user, type])
  @@map("social_network")
}

model Knowledge {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [fk_id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_user  Int
  name        String
  description String

  @@unique([fk_id_user, name])
  @@map("knowledge")
}

model EventComment {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(uuid()) @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  user          User      @relation(fields: [fk_id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_user    Int
  event         Event     @relation(fields: [fk_id_event], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_event   Int
  text          String
  starts        Int
  reasonDeleted String?   @map("reason_deleted")

  @@map("event_comment")
}

model GroupComment {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(uuid()) @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  user          User      @relation(fields: [fk_id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_user    Int
  group         Group     @relation(fields: [fk_id_group], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_group   Int
  text          String
  starts        Int
  reasonDeleted String?   @map("reason_deleted")

  @@map("group_comment")
}

enum EventNotificationType {
  NEW_EVENT
  EVENT_DAY
}

model EventNotification {
  id          Int                   @id @default(autoincrement())
  uuid        String                @unique @default(uuid()) @db.Uuid
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @updatedAt @map("updated_at")
  type        EventNotificationType
  isRead      Boolean               @default(false) @map("is_read")
  user        User                  @relation(fields: [fk_id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_user  Int
  event       Event                 @relation(fields: [fk_id_event], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_id_event Int

  @@map("event_notification")
}
